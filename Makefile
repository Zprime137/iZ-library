# Compiler and flags
CC = gcc

# Preprocessor flags
CPPFLAGS = -I$(INCLUDE_DIR) -DENABLE_LOGGING # Preprocessor flags to specify the include directory and enable logging

# Compiler flags
COMMON_FLAGS = -Wall -Wextra -Wshadow -Wformat=2 -Wpedantic -MMD -MP # Common flags for the compiler to enable warnings and generate dependency files
CFLAGS = -O3 -flto $(COMMON_FLAGS) -g # Optimization level 3, link-time optimization, debug information.

# Linker flags
LDFLAGS = -lpthread -lgmp -lssl -lcrypto


# Directories
SRC_DIR = src
OBJ_DIR = build
OBJ_SRC_DIR = $(OBJ_DIR)/src
OBJ_TEST_DIR = $(OBJ_DIR)/test
INCLUDE_DIR = include
OUTPUT_DIR = output
TEST_DIR = test
LOG_DIR = logs

# File for printf stdout
STDOUT_FILE = stdout.txt  # The file where stdout from the program will be saved

# Program name and target
PROGRAM = __program__  # The name of the final program binary
TARGET = $(OBJ_SRC_DIR)/$(PROGRAM)  # The target binary to be built in the build/src directory

# Source and object files
SOURCES = $(shell find $(SRC_DIR) -name "*.c")  # List all .c files in the source directory
OBJECTS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_SRC_DIR)/%.o, $(SOURCES))  # Convert the list of .c files to a list of .o files in the build/src directory

# Test source and object files (excluding main.o)
TEST_SOURCES = $(wildcard $(TEST_DIR)/*.c)  # List all .c files in the test directory
TEST_OBJECTS = $(patsubst $(TEST_DIR)/%.c, $(OBJ_TEST_DIR)/%.o, $(TEST_SOURCES))  # Convert the list of .c files to .o files in the build/test directory
TEST_BUILD_OBJECTS = $(filter-out $(OBJ_SRC_DIR)/main.o, $(OBJECTS)) $(TEST_OBJECTS)  # Test build objects excluding the main.o

# Dependency files
DEPS = $(OBJECTS:.o=.d) $(TEST_OBJECTS:.o=.d)  # List of dependency files (automatically generated by the compiler)

# Output file
OUTPUT = $(OUTPUT_DIR)/$(STDOUT_FILE)  # The final output file where stdout is stored

# Default target
all: $(TARGET) run

# Create necessary directories
directories:
	@mkdir -p $(OBJ_SRC_DIR) $(OBJ_TEST_DIR) $(OUTPUT_DIR)

# Build the program
$(TARGET): $(OBJECTS)
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $(TARGET) $(OBJECTS) $(LDFLAGS)

# Compile source files into object files and mirror the folder structure in build/src
$(OBJ_SRC_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)  # Create the necessary directory structure in build/src
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# Compile test files into object files and mirror the folder structure in build/test
$(OBJ_TEST_DIR)/%.o: $(TEST_DIR)/%.c
	@mkdir -p $(dir $@)  # Create the necessary directory structure for test objects in build/test
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# Include dependency files
-include $(DEPS)

# Run the program and save the output
run: $(TARGET)
	@mkdir -p $(OUTPUT_DIR)
	./$(TARGET) >> $(OUTPUT) 2>&1

# Build and run tests
test: $(TEST_OBJECTS) $(TEST_BUILD_OBJECTS)
	@mkdir -p $(OBJ_TEST_DIR)
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $(OBJ_TEST_DIR)/test_runner $(TEST_BUILD_OBJECTS) $(LDFLAGS)
	./$(OBJ_TEST_DIR)/test_runner

# Clean generated files
clean:
	rm -f $(OBJ_SRC_DIR)/*.o $(OBJ_SRC_DIR)/*.d $(OBJ_TEST_DIR)/*.o $(OBJ_TEST_DIR)/*.d $(TARGET) $(OBJ_TEST_DIR)/test_runner

# Build with debug flags
debug: CPPFLAGS += -DENABLE_LOGGING
debug: CFLAGS = -O0 -g $(COMMON_FLAGS)
debug: $(TARGET)

# Build optimized release version without logging
release: CPPFLAGS = -I$(INCLUDE_DIR)
release: CFLAGS = -O3 -flto $(COMMON_FLAGS)
release: $(TARGET)

# Help message
help:
	@echo "Available targets:"
	@echo "  all       - Build the program"
	@echo "  run       - Run the program"
	@echo "  test      - Build and run tests"
	@echo "  clean     - Remove generated files"
	@echo "  debug     - Build with debug flags"
	@echo "  release   - Build optimized release version"

# Phony targets
.PHONY: all run test clean debug release help directories

# Delete incomplete files if a command fails
.DELETE_ON_ERROR:
